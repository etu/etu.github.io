@import "scss/functions";

/********************************************************************
 * Variables
 */

/* Base font size in px */
$fontSize: 16;
$pageWidth: #{$fontSize * 50}px;

$codeBoldWeight: 600;

/* Colors */
$darkBackgroundColor: #171717;
$darkForegroundColor: #FFFFFF;
$lightBackgroundColor: #F4F4F4;
$lightForegroundColor: #000000;

$linkColor: #00B0FB;
$visitedLinkColor: #FF047E;

$codeCommentColor: #002EC7;
$codeFunctionNameColor: #00F03C;
$codeKeywordColor: #FF256F;
$codeNixBuiltInColor: #FF6701;
$codeNixConstantColor: #00B9F4;
$codePhpTagColor: #802E0E;
$codeStringColor: #F9D200;
$codeTypeColor: #8835FF;

$codeTagForegroundColor: #4400FF;

/* Dark colors */
$darkMenuHoverColor: lighten($darkBackgroundColor, 10%);
$darkCodeLanguageBoxColor: $darkMenuHoverColor;
$darkContentDelimiters: contrast-color($darkForegroundColor, $darkBackgroundColor);
$darkForegroundColor: contrast-color($darkForegroundColor, $darkBackgroundColor);

$lightMenuHoverColor: darken($lightBackgroundColor, 10%);
$lightCodeLanguageBoxColor: $lightMenuHoverColor;
$lightContentDelimiters: contrast-color($lightForegroundColor, $lightBackgroundColor);
$lightForegroundColor: contrast-color($lightForegroundColor, $lightBackgroundColor);


/********************************************************************
 * Mixins
 */
@mixin rem-attributes($name, $remSize) {
    #{$name}: #{$fontSize * $remSize}px;
    #{$name}: #{$remSize}rem;
}

// Mixins with the variables for the color themes.
@mixin light-theme() {
    --background-color: #{$lightBackgroundColor};
    --blockquote-background-color: #{$lightCodeLanguageBoxColor};
    --blockquote-before-foreground-color: #{contrast-color($lightForegroundColor, $lightCodeLanguageBoxColor, 2)};
    --blockquote-foreground-color: #{contrast-color($lightForegroundColor, $lightCodeLanguageBoxColor)};
    --code-background-color: #{darken($lightBackgroundColor, 5%)};
    --code-bold-weight: #{$codeBoldWeight};
    --code-comment-color: #{contrast-color($codeCommentColor, $lightBackgroundColor)};
    --code-foreground-color: #{contrast-color($codeTagForegroundColor, darken($lightBackgroundColor, 5%))};
    --code-function-name-color: #{contrast-color($codeFunctionNameColor, $lightBackgroundColor)};
    --code-keyword-color: #{contrast-color($codeKeywordColor, $lightBackgroundColor)};
    --code-nix-builtin-color: #{contrast-color($codeNixBuiltInColor, $lightBackgroundColor)};
    --code-nix-constant-color: #{contrast-color($codeNixConstantColor, $lightBackgroundColor)};
    --code-php-tag-color: #{contrast-color($codePhpTagColor, $lightBackgroundColor)};
    --code-string-color: #{contrast-color($codeStringColor, $lightBackgroundColor)};
    --code-type-color: #{contrast-color($codeTypeColor, $lightBackgroundColor)};
    --content-delimiter-color: #{$lightContentDelimiters};
    --external-link-image: url("/imgs/external-arrow-dark.svg");
    --foreground-color: #{$lightForegroundColor};
    --link-color: #{contrast-color($linkColor, $lightBackgroundColor)};
    --link-menu-hover-visited-color: #{contrast-color($visitedLinkColor, $lightMenuHoverColor)};
    --link-visited-color: #{contrast-color($visitedLinkColor, $lightBackgroundColor)};
    --menu-hover-background-color: #{$lightMenuHoverColor};
    --menu-hover-foreground-color: #{contrast-color($linkColor, $lightMenuHoverColor)};
    --pre-before-background-color: #{$lightCodeLanguageBoxColor};
    --pre-before-foreground-color: #{contrast-color($lightForegroundColor, $lightCodeLanguageBoxColor)};
}

@mixin dark-theme() {
    --background-color: #{$darkBackgroundColor};
    --blockquote-background-color: #{$darkCodeLanguageBoxColor};
    --blockquote-before-foreground-color: #{contrast-color($darkForegroundColor, $darkCodeLanguageBoxColor, 2)};
    --blockquote-foreground-color: #{contrast-color($darkForegroundColor, $darkCodeLanguageBoxColor)};
    --code-background-color: #{darken($darkBackgroundColor, 5%)};
    --code-bold-weight: #{$codeBoldWeight};
    --code-comment-color: #{contrast-color($codeCommentColor, $darkBackgroundColor)};
    --code-foreground-color: #{contrast-color($codeTagForegroundColor, darken($darkBackgroundColor, 5%))};
    --code-function-name-color: #{contrast-color($codeFunctionNameColor, $darkBackgroundColor)};
    --code-keyword-color: #{contrast-color($codeKeywordColor, $darkBackgroundColor)};
    --code-nix-builtin-color: #{contrast-color($codeNixBuiltInColor, $darkBackgroundColor)};
    --code-nix-constant-color: #{contrast-color($codeNixConstantColor, $darkBackgroundColor)};
    --code-php-tag-color: #{contrast-color($codePhpTagColor, $darkBackgroundColor)};
    --code-string-color: #{contrast-color($codeStringColor, $darkBackgroundColor)};
    --code-type-color: #{contrast-color($codeTypeColor, $darkBackgroundColor)};
    --content-delimiter-color: #{$darkContentDelimiters};
    --external-link-image: url("/imgs/external-arrow-light.svg");
    --foreground-color: #{$darkForegroundColor};
    --link-color: #{contrast-color($linkColor, $darkBackgroundColor)};
    --link-menu-hover-visited-color: #{contrast-color($visitedLinkColor, $darkMenuHoverColor)};
    --link-visited-color: #{contrast-color($visitedLinkColor, $darkBackgroundColor)};
    --menu-hover-background-color: #{$darkMenuHoverColor};
    --menu-hover-foreground-color: #{contrast-color($linkColor, $darkMenuHoverColor)};
    --pre-before-background-color: #{$darkCodeLanguageBoxColor};
    --pre-before-foreground-color: #{contrast-color($darkForegroundColor, $darkCodeLanguageBoxColor)};
}


/********************************************************************
 * Define CSS variables for theme support
 */

:root {
    --font-size: #{$fontSize}px;

    @include light-theme();
}

@media (prefers-color-scheme: dark) {
    :root {
        @include dark-theme();
    }
}


/********************************************************************
 * Apply a natural box layout model to all elements
 */
*, *:before, *:after {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    z-index: 1;
    position: relative;
}


/********************************************************************
 * NAVIGATION
 */
nav {
    font-family: monospace;

    /* Make a border on top and bottom */
    border-width: 0;
    @include rem-attributes(border-bottom-width, 0.2);
    @include rem-attributes(border-top-width, 0.2);
    border-color: var(--content-delimiter-color);
    border-style: solid;

    /* Center items */
    text-align: center;

    /* http://css-tricks.com/fighting-the-space-between-inline-block-elements/ */
    font-size: 0;

    ul {
        display: inline-block;

        margin: 0;
        padding: 0;

        list-style: none;

        li {
            float: left;

            a {
                display: inline-block;

                @include rem-attributes(font-size, 1.2);
                @include rem-attributes(line-height, 3.4);
                @include rem-attributes(padding-right, 1);
                @include rem-attributes(padding-left, 1);

                color: var(--link-color);

                &:visited {
                    color: var(--link-visited-color);
                }

                &:hover {
                    background-color: var(--menu-hover-background-color);
                    color: var(--menu-hover-foreground-color);

                    &:visited {
                        color: var(--link-menu-hover-visited-color);
                    }
                }
            }
        }
    }
}

/********************************************************************
 * THEME
 */
html {
    background-color: var(--background-color);
    color: var(--foreground-color);
    font-family: sans;
    font-size: var(--font-size);
}

h1, h2, h3, h4 {
    font-family: sans;
}

body {
    line-height: 1.5;
    margin: 2em auto;
    max-width: $pageWidth;
    padding: 1em;

    .figure p {
        text-align: center;

        img {
            max-width: 100%;
        }
    }
}

a {
    color: var(--link-color);

    &:visited {
        color: var(--link-visited-color);
    }

    &[href^="mailto"]::after,&[href^="http"]::after,&[href^="https://"]::after {
        content: "";
        @include rem-attributes(width, 0.7);
        @include rem-attributes(height, 0.7);
        @include rem-attributes(margin-left, 0.3);
        background-image: var(--external-link-image);
        background-position: center;
        background-repeat: no-repeat;
        background-size: contain;
        display: inline-block;
    }
}

blockquote {
    margin: 0;
    @include rem-attributes(margin-top, 0.5);
    @include rem-attributes(margin-bottom, 0.5);

    @include rem-attributes(padding-top, 0.4);
    @include rem-attributes(padding-bottom, 0.4);
    @include rem-attributes(padding-left, 1.5);
    @include rem-attributes(padding-right, 1.5);

    background: var(--blockquote-background-color);
    color: var(--blockquote-foreground-color);

    &:before {
        content: '‚Äù';
        position: absolute;
        @include rem-attributes(top, -1);
        right: 0;
        @include rem-attributes(font-size, 4);
        color: var(--blockquote-before-foreground-color);
    }
}

/* Org-mode code box */
pre {
    &.src {
        @include rem-attributes(border-width, 0.1);
        border-color: var(--content-delimiter-color);
        border-style: solid;

        margin: 0;

        overflow-x: auto;
        @include rem-attributes(padding, 1);

        &:before {
            top: 0;
            right: 0;

            background: var(--pre-before-background-color);
            color: var(--pre-before-foreground-color);

            position: absolute;
            @include rem-attributes(padding-top, 0.3);
            @include rem-attributes(padding-bottom, 0.3);
            @include rem-attributes(padding-left, 1);
            @include rem-attributes(padding-right, 1);

            /* Add border to language box */
            @include rem-attributes(border-width, 0.1);
            border-top-width: 0;
            border-right-width: 0;
            border-color: var(--content-delimiter-color);
            border-style: solid;
        }

        /* Syntax highlighting */
        span.org- {
            &comment, &comment-delimiter, &doc {
                color: var(--code-comment-color);
            };
            &function-name, &php-function-name, &css-selector {
                color: var(--code-function-name-color);
                font-weight: var(--code-bold-weight);
            }
            &keyword, &nix-keyword, &php-keyword, &php-class-declaration, &css-property {
                color: var(--code-keyword-color);
                font-weight: var(--code-bold-weight);
            }
            &nix-builtin {
                color: var(--code-nix-builtin-color);
            }
            &nix-constant {
                color: var(--code-nix-constant-color);
            }
            &php-php-tag {
                color: var(--code-php-tag-color);
            }
            &string, &php-string {
                color: var(--code-string-color);
            }
            &type {
                color: var(--code-type-color);
            }
            &variable-name, &nix-attribute {
                font-weight: var(--code-bold-weight);
            }
        }
    }

    &.src-bash:before { content: 'bash'; }
    &.src-elisp:before, &.src-emacs-lisp:before { content: 'Emacs Lisp'; }
    &.src-go:before  { content: 'Go'; }
    &.src-nix:before { content: 'Nix'; }
    &.src-org:before { content: 'Org mode'; }
    &.src-php:before { content: 'PHP'; }
    &.src-scss:before { content: 'SCSS'; }
    &.src-sh:before  { content: 'sh'; }
    &.src-sql:before { content: 'SQL'; }
    &.src-xml:before { content: 'xml'; }
    &.src-yaml:before { content: 'YAML'; }
}

code {
    color: var(--code-foreground-color);
    background: var(--code-background-color);
    font-family: monospace;
    @include rem-attributes(padding, 0.3);
}

/* Org-mode footnotes */
.footdef sup {
    @include rem-attributes(padding-right, 1);

    &:after { content: ']'; }
    &:before { content: '['; }
}

/* FOOTER */
div#postamble {
    /* Make a border on top and bottom */
    border-width: 0;
    @include rem-attributes(border-bottom-width, 0.2);
    @include rem-attributes(border-top-width, 0.2);
    border-color: var(--content-delimiter-color);
    border-style: solid;

    @include rem-attributes(padding-bottom, 1);
    @include rem-attributes(padding-top, 1);

    @include rem-attributes(margin-top, 1);

    p { margin: 0; }
}

/********************************************************************
 * MEDIA QUERIES
 */
@media screen and (max-width: $pageWidth) {
    /* Org-mode code box */
    pre.src {
        border-left-width: 0;
        border-right-width: 0;
        @include rem-attributes(padding-top, 2);

        &:before {
            @include rem-attributes(border-right-width, 0.1);
        }
    }
}
