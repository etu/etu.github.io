@import "scss/functions";

/********************************************************************
 * Variables
 */

/* Base font size in px */
$fontSize: 16;

$codeBoldWeight: 600;

/* Colors */
$defaultBackgroundColor: #171717;
$defaultForegroundColor: #FFFFFF;
$lightBackgroundColor: #F4F4F4;
$lightForegroundColor: #000000;

$linkColor: #00B0FB;
$visitedLinkColor: #FF047E;

$codeCommentColor: #002EC7;
$codeFunctionNameColor: #00F03C;
$codeKeywordColor: #FF256F;
$codeNixBuiltInColor: #FF6701;
$codeNixConstantColor: #00B9F4;
$codePhpTagColor: #802E0E;
$codeStringColor: #F9D200;
$codeTypeColor: #8835FF;

$codeTagForegroundColor: #4400FF;

/* Default colors */
$defaultMenuHoverColor: lighten($defaultBackgroundColor, 10%);
$defaultCodeLanguageBoxColor: $defaultMenuHoverColor;
$defaultContentDelimiters: contrast-color($defaultForegroundColor, $defaultBackgroundColor);
$defaultForegroundColor: contrast-color($defaultForegroundColor, $defaultBackgroundColor);

$lightMenuHoverColor: darken($lightBackgroundColor, 10%);
$lightCodeLanguageBoxColor: $lightMenuHoverColor;
$lightContentDelimiters: contrast-color($lightForegroundColor, $lightBackgroundColor);
$lightForegroundColor: contrast-color($lightForegroundColor, $lightBackgroundColor);


/********************************************************************
 * Mixins
 */
@mixin rem-attributes($name, $remSize) {
    #{$name}: #{$fontSize * $remSize}px;
    #{$name}: #{$remSize}rem;
}

@mixin color-highlights($bg) {
    span.org- {
        &comment, &comment-delimiter, &doc {
            color: contrast-color($codeCommentColor, $bg);
        };
        &function-name, &php-function-name {
            color: contrast-color($codeFunctionNameColor, $bg);
            font-weight: $codeBoldWeight;
        }
        &keyword, &nix-keyword, &php-keyword, &php-class-declaration {
            color: contrast-color($codeKeywordColor, $bg);
            font-weight: $codeBoldWeight;
        }
        &nix-builtin {
            color: contrast-color($codeNixBuiltInColor, $bg);
        }
        &nix-constant {
            color: contrast-color($codeNixConstantColor, $bg);
        }
        &php-php-tag {
            color: contrast-color($codePhpTagColor, $bg);
        }
        &string, &php-string {
            color: contrast-color($codeStringColor, $bg);
        }
        &type {
            color: contrast-color($codeTypeColor, $bg);
        }
        &variable-name, &nix-attribute { font-weight: $codeBoldWeight; }
    }
}


/********************************************************************
 * Apply a natural box layout model to all elements
 */
*, *:before, *:after {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    z-index: 1;
    position: relative;
}

/********************************************************************
 * NAVIGATION
 */
nav {
    font-family: monospace;

    /* Make a border on top and bottom */
    border-width: 0;
    @include rem-attributes(border-bottom-width, 0.2);
    @include rem-attributes(border-top-width, 0.2);
    border-color: $defaultContentDelimiters;
    border-style: solid;

    /* Center items */
    text-align: center;

    /* http://css-tricks.com/fighting-the-space-between-inline-block-elements/ */
    font-size: 0;

    ul {
        display: inline-block;

        margin: 0;
        padding: 0;

        list-style: none;

        li {
            float: left;

            a {
                display: inline-block;

                @include rem-attributes(font-size, 1.2);
                @include rem-attributes(line-height, 3.4);
                @include rem-attributes(padding-right, 1);
                @include rem-attributes(padding-left, 1);

                color: contrast-color($linkColor, $defaultBackgroundColor);

                &:visited {
                    color: contrast-color($visitedLinkColor, $defaultBackgroundColor);
                }

                &:hover {
                    background-color: $defaultMenuHoverColor;
                    color: contrast-color($linkColor, $defaultMenuHoverColor);

                    &:visited {
                        color: contrast-color($visitedLinkColor, $defaultMenuHoverColor);
                    }
                }
            }
        }
    }
}

/********************************************************************
 * THEME
 */
html {
    background-color: $defaultBackgroundColor;
    color: $defaultForegroundColor;
    font-family: sans;
    font-size: #{$fontSize}px;
}

h1, h2, h3, h4 {
    font-family: sans;
}

body {
    line-height: 1.5;
    margin: 2em auto;
    max-width: 800px;
    padding: 1em;

    .figure p {
        text-align: center;
    }
}

a {
    color: contrast-color($linkColor, $defaultBackgroundColor);

    &:visited {
        color: contrast-color($visitedLinkColor, $defaultBackgroundColor);
    }
}

blockquote {
    margin: 0;
    @include rem-attributes(margin-top, 0.5);
    @include rem-attributes(margin-bottom, 0.5);

    @include rem-attributes(padding-top, 0.4);
    @include rem-attributes(padding-bottom, 0.4);
    @include rem-attributes(padding-left, 1.5);
    @include rem-attributes(padding-right, 1.5);

    background: $defaultCodeLanguageBoxColor;
    color: contrast-color($defaultForegroundColor, $defaultCodeLanguageBoxColor);

    &:before {
        content: '‚Äù';
        position: absolute;
        @include rem-attributes(top, -1);
        right: 0;
        @include rem-attributes(font-size, 4);
        color: contrast-color($defaultForegroundColor, $defaultCodeLanguageBoxColor, 2);
    }
}

/* Org-mode code box */
pre {
    &.src {
        @include rem-attributes(border-width, 0.1);
        border-color: $defaultContentDelimiters;
        border-style: solid;

        margin: 0;

        overflow-x: auto;
        @include rem-attributes(padding, 1);

        &:before {
            top: 0;
            right: 0;

            background: $defaultCodeLanguageBoxColor;
            color: contrast-color($defaultForegroundColor, $defaultCodeLanguageBoxColor);

            position: absolute;
            @include rem-attributes(padding-top, 0.3);
            @include rem-attributes(padding-bottom, 0.3);
            @include rem-attributes(padding-left, 1);
            @include rem-attributes(padding-right, 1);

            /* Add border to language box */
            @include rem-attributes(border-width, 0.1);
            border-top-width: 0;
            border-right-width: 0;
            border-color: $defaultContentDelimiters;
            border-style: solid;
        }

        /* Syntax highlighting */
        @include color-highlights($defaultBackgroundColor);
    }

    &.src-bash:before { content: 'bash'; }
    &.src-elisp:before, &.src-emacs-lisp:before { content: 'Emacs Lisp'; }
    &.src-go:before  { content: 'Go'; }
    &.src-nix:before { content: 'Nix'; }
    &.src-org:before { content: 'Org mode'; }
    &.src-php:before { content: 'PHP'; }
    &.src-sh:before  { content: 'sh'; }
    &.src-sql:before { content: 'SQL'; }
    &.src-xml:before { content: 'xml'; }
}

code {
    color: contrast-color($codeTagForegroundColor, darken($defaultBackgroundColor, 5%));
    background: darken($defaultBackgroundColor, 5%);
    font-family: monospace;
    padding: 4px;
}

/* Org-mode footnotes */
.footdef sup {
    @include rem-attributes(padding-right, 1);

    &:after { content: ']'; }
    &:before { content: '['; }
}

/* FOOTER */
div#postamble {
    /* Make a border on top and bottom */
    border-width: 0;
    @include rem-attributes(border-bottom-width, 0.2);
    @include rem-attributes(border-top-width, 0.2);
    border-color: $defaultContentDelimiters;
    border-style: solid;

    @include rem-attributes(padding-bottom, 1);
    @include rem-attributes(padding-top, 1);

    @include rem-attributes(margin-top, 1);

    p { margin: 0; }
}

/********************************************************************
 * MEDIA QUERIES
 */
@media (prefers-color-scheme: light) {
    html {
        background-color: $lightBackgroundColor;
        color: $lightForegroundColor;
    }

    a {
        color: contrast-color($linkColor, $lightBackgroundColor);

        &:visited {
            color: contrast-color($visitedLinkColor, $lightBackgroundColor);
        }
    }

    blockquote {
        background: $lightCodeLanguageBoxColor;
        color: contrast-color($lightForegroundColor, $lightCodeLanguageBoxColor);

        &:before {
            color: contrast-color($lightForegroundColor, $lightCodeLanguageBoxColor, 2);
        }
    }

    nav {
        border-color: $lightContentDelimiters;

        ul li a {
            color: contrast-color($linkColor, $lightBackgroundColor);

            &:visited {
                color: contrast-color($visitedLinkColor, $lightBackgroundColor);
            }

            &:hover {
                background-color: $lightMenuHoverColor;
                color: contrast-color($linkColor, $lightMenuHoverColor);

                &:visited {
                    color: contrast-color($visitedLinkColor, $lightMenuHoverColor);
                }
            }
        }
    }

    pre.src {
        border-color: $lightContentDelimiters;

        &:before {
            background: $lightCodeLanguageBoxColor;
            color: contrast-color($lightForegroundColor, $lightCodeLanguageBoxColor);

            border-color: $lightContentDelimiters;
        }

        /* Syntax highlighting */
        @include color-highlights($lightBackgroundColor);
    }

    code {
        color: contrast-color($codeTagForegroundColor, darken($lightBackgroundColor, 5%));
        background: darken($lightBackgroundColor, 5%);
    }

    div#postamble {
        border-color: $lightContentDelimiters;
    }
}

@media screen and (max-width: 800px) {
    /* Org-mode code box */
    pre.src {
        border-left-width: 0;
        border-right-width: 0;
        @include rem-attributes(padding-top, 2);

        &:before {
            @include rem-attributes(border-right-width, 0.1);
        }
    }
}
